// Hopefully having separated the Source from the HIR will allow us create
// nodes that one form can have, but not the other

#ifndef SourceNode
#define SourceNode(KIND)
#endif

#ifndef HIRNode 
#define HIRNode(KIND)
#endif

#ifndef BothNode 
#define BothNode(KIND) SourceNode(KIND) HIRNode(KIND)
#endif

BothNode(CompilationUnit)
BothNode(SubprogramDecl)
BothNode(DataFieldDecl)
BothNode(DataDecl)
BothNode(ParamDecl)
SourceNode(ExprStmt)
BothNode(ExprIntegerNumber)
BothNode(ExprRet)
BothNode(ExprVarRef)
BothNode(ExprAggregateDataAccess)
BothNode(ExprTuple)
SourceNode(TupleElem)
BothNode(ExprMatch)
BothNode(PlaceholderDecl)
BothNode(ExprMatchCase)
BothNode(UnionDecl)
BothNode(UnionAlternativeDecl)
BothNode(UnionAlternativeFieldDecl)
SourceNode(TupleDestructuration)
SourceNode(TupleDestructurationElem)
SourceNode(DataDestructuration)
SourceNode(DataDestructurationElem)
SourceNode(UnionDestructuration)
HIRNode(AggregateDestructuration)
HIRNode(AggregateDestructurationElem)
SourceNode(VoidPlaceholder)
SourceNode(Otherwise)

#undef BothNode 
#undef HIRNode 
#undef SourceNode
#undef Node
