#ifndef DIAG
#define DIAG(ID, SEV, MSG)
#endif

#ifndef ERROR
#define ERROR(ID, MSG) DIAG(err_##ID, DiagnosticSeverity::Error, MSG)
#endif

#ifndef WARN
#define WARN(ID, MSG) DIAG(ID, DiagnosticSeverity::Warning, MSG)
#endif

//=-------------------------- Parsing Diags --------------------------------=//
ERROR(found_unknown_token,                     "found unexpected token")
ERROR(missing_arrow,                           "missing type arrow")
ERROR(missing_comma_prior_tuple_param,         "missing comma before next tuple parameter")
ERROR(missing_colon,                           "missing needed colon before start of parameter list")
ERROR(missing_colon_on_data_field,             "missing colon between identifier and type on data field")
ERROR(missing_expression_after_ret_keyword,    "missing expression after ret keyword")
ERROR(missing_eq_of_data_decl,                 "missing mandatory '=' on data declaration")
ERROR(missing_id_of_data_decl,                 "missing identifier on data declaration")
ERROR(missing_id_of_data_field,                "missing identifier on data field")
ERROR(missing_left_key_brace,                  "missing left key brace")
ERROR(missing_left_parenthesis_opening_tuple,  "missing left parenthesis opening tuple")
ERROR(missing_right_key_brace,                 "missing right key brace")
ERROR(missing_right_parenthesis_closing_tuple, "missing right parenthesis closing tuple")
ERROR(missing_semicolon_after_expr,            "missing semicolon")
ERROR(missing_subprogram_class,                "missing subprogram classification on subprogram definition")
ERROR(missing_subprogram_id,                   "missing subprogram identifier")
ERROR(missing_type,                            "missing type")
ERROR(missing_type_pior_variable,              "missing type of variable")
ERROR(missing_type_on_data_field,              "missing type on data field")
ERROR(missing_variable_identifier_after_type,  "missing variable identifier after type")

//=----------------------------- Sema Diags --------------------------------=//
ERROR(subprogram_does_not_return_in_all_paths, "subprogram with return type different to unit does not return in all possible paths")
ERROR(mistmach_between_ret_and_subprogram_type, "mismatch between returned expression type and subprogram return type")
ERROR(match_branch_type_does_not_match_first_branch_type, "match expr branch type does not match first branch type")
ERROR(match_lhs_branch_is_not_integer, "only interger expressions are supported on the left hand side of a branch")
ERROR(match_without_final_otherwise_catch_all, "missing otherwise catch-all in match expr")
ERROR(otherwise_can_only_appear_at_last_case, "otherwise can only appear as the last case")

#undef WARN
#undef ERROR
#undef DIAG
